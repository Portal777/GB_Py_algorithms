"""
Отсортируйте по убыванию методом пузырька одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.

Примечания:
a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.
"""
import cProfile
from random import randint

# my_array = [randint(-100, 100) for i in range(15)]
my_array = []
# my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Улучшения алгоритма: строка 24, 28 - 30 : суть такая, что мы заводим счетчик изменений (кол-во перемещений элементов)
# если при очередном проходе в цикле for, мы не перемещали элементы, значит массив уже отсортирован, дальнейший проход,
# по оставшимся элементам, не нужен. Судя по cProfile, есть толк, но улучшение не глобальное


def sort_func(array):
    if len(array) <= 1:
        return "Список не нуждается в сортировке"
    n = 1
    while n < len(array):
        count = 0
        for i in range(len(array) - n):
            if array[i] > array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                count += 1
        if count == 0:
            break
        n += 1
    return array


print(sort_func(my_array))
# print(my_array)

# cProfile.run('sort_func(my_array)')
